{"remainingRequest":"/home/imo/projects/vue-calendar/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/imo/projects/vue-calendar/src/components/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/imo/projects/vue-calendar/src/components/Calendar.vue","mtime":1571092389819},{"path":"/home/imo/projects/vue-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/imo/projects/vue-calendar/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/imo/projects/vue-calendar/node_modules/vuetify-loader/lib/loader.js","mtime":1564062719000},{"path":"/home/imo/projects/vue-calendar/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/imo/projects/vue-calendar/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { db } from \"@/main\";\n\nexport default {\n  data: () => ({\n    today: new Date().toISOString().substr(0, 10),\n    focus: new Date().toISOString().substr(0, 10),\n    type: \"month\",\n    typeToLabel: {\n      month: \"Month\",\n      week: \"Week\",\n      day: \"Day\",\n      \"4day\": \"4 days\"\n    },\n    name: null,\n    details: null,\n    start: null,\n    end: null,\n    color: \"#1976d2\",\n    currentlyEditing: null,\n    selectedEvent: {},\n    selectedElement: null,\n    selectedOpen: false,\n    events: [],\n    dialog: false\n  }),\n\n  computed: {\n    title() {\n      const { start, end } = this;\n      if (!start || !end) {\n        return \"\";\n      }\n\n      const startMonth = this.monthFormatter(start);\n      const endMonth = this.monthFormatter(end);\n      const suffixMonth = startMonth === endMonth ? \"\" : endMonth;\n\n      const startYear = start.year;\n      const endYear = end.year;\n      const suffixYear = startYear === endYear ? \"\" : endYear;\n\n      const startDay = start.day + this.nth(start.day);\n      const endDay = end.day + this.nth(end.day);\n\n      switch (this.type) {\n        case \"month\":\n          return `${startMonth} ${startYear}`;\n        case \"week\":\n        case \"4day\":\n          return `${startMonth} ${startDay} ${startYear} - ${suffixMonth} ${endDay} ${suffixYear}`;\n        case \"day\":\n          return `${startMonth} ${startDay} ${startYear}`;\n      }\n      return \"\";\n    },\n    monthFormatter() {\n      return this.$refs.calendar.getFormatter({\n        timeZone: \"UTC\",\n        month: \"long\"\n      });\n    }\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      let snapshot = await db.collection(\"calEvent\").get();\n      let events = [];\n      snapshot.forEach(doc => {\n        let appData = doc.data();\n        appData.id = doc.id;\n        events.push(appData);\n      });\n      this.events = events;\n    },\n\n    async addEvent() {\n      if (this.name && this.start && this.end) {\n        await db.collection(\"calEvent\").add({\n          name: this.name,\n          details: this.details,\n          start: this.start,\n          end: this.end,\n          color: this.color\n        });\n\n        this.getEvents();\n        this.name = \"\";\n        this.details = \"\";\n        this.start = \"\";\n        this.end = \"\";\n        this.color = \"\";\n      } else {\n        alert(\"Name, start, and end are required.\");\n      }\n    },\n\n    async updateEvent(ev) {\n      await db\n        .collection(\"calEvent\")\n        .doc(this.currentlyEditing)\n        .update({ details: ev.details });\n\n      this.selectedOpen = false;\n      this.currentlyEditing = null;\n    },\n\n    async deleteEvent(ev) {\n      await db\n        .collection(\"calEvent\")\n        .doc(ev)\n        .delete();\n\n      this.selectedOpen = false;\n      this.getEvents();\n    },\n\n    viewDay({ date }) {\n      this.focus = date;\n      this.type = \"day\";\n    },\n\n    getEventColor(event) {\n      return event.color;\n    },\n\n    setToday() {\n      this.focus = this.today;\n    },\n\n    prev() {\n      this.$refs.calendar.prev();\n    },\n\n    next() {\n      this.$refs.calendar.next();\n    },\n\n    editEvent(ev) {\n      this.currentlyEditing = ev.id;\n    },\n\n    showEvent({ nativeEvent, event }) {\n      const open = () => {\n        this.selectedEvent = event;\n        this.selectedElement = nativeEvent.target;\n        setTimeout(() => (this.selectedOpen = true), 10);\n      };\n\n      if (this.selectedOpen) {\n        this.selectedOpen = false;\n        setTimeout(open, 10);\n      } else {\n        open();\n      }\n\n      nativeEvent.stopPropagation();\n    },\n\n    updateRange({ start, end }) {\n      // You could load events from an outside source (like database) now that we have the start and end dates on the calendar\n      this.start = start;\n      this.end = end;\n    },\n\n    nth(d) {\n      return d > 3 && d < 21\n        ? \"th\"\n        : [\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\"][d % 10];\n    }\n  }\n};\n",{"version":3,"sources":["Calendar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"Calendar.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-row class=\"fill-height\">\n    <v-col>\n      <v-sheet height=\"64\">\n        <v-toolbar flat color=\"white\">\n          <v-btn color=\"primary\" class=\"mr-4\" @click=\"dialog = true\" dark>New Event</v-btn>\n          <v-btn outlined class=\"mr-4\" @click=\"setToday\">Today</v-btn>\n          <v-btn fab text small @click=\"prev\">\n            <v-icon small>mdi-chevron-left</v-icon>\n          </v-btn>\n          <v-btn fab text small @click=\"next\" class=\"mr-4\">\n            <v-icon small>mdi-chevron-right</v-icon>\n          </v-btn>\n          <v-toolbar-title>{{ title }}</v-toolbar-title>\n          <v-spacer></v-spacer>\n          <v-menu bottom right>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn outlined v-on=\"on\">\n                <span>{{ typeToLabel[type] }}</span>\n                <v-icon right>mdi-menu-down</v-icon>\n              </v-btn>\n            </template>\n            <v-list>\n              <v-list-item @click=\"type = 'day'\">\n                <v-list-item-title>Day</v-list-item-title>\n              </v-list-item>\n              <v-list-item @click=\"type = 'week'\">\n                <v-list-item-title>Week</v-list-item-title>\n              </v-list-item>\n              <v-list-item @click=\"type = 'month'\">\n                <v-list-item-title>Month</v-list-item-title>\n              </v-list-item>\n              <v-list-item @click=\"type = '4day'\">\n                <v-list-item-title>4 days</v-list-item-title>\n              </v-list-item>\n            </v-list>\n          </v-menu>\n        </v-toolbar>\n      </v-sheet>\n\n      <!-- Add Event Dialog -->\n      <v-dialog v-model=\"dialog\" max-width=\"500\">\n        <v-card>\n          <v-container>\n            <v-form @submit.prevent=\"addEvent\">\n              <v-text-field v-model=\"name\" type=\"text\" label=\"event name (required)\"></v-text-field>\n              <v-text-field v-model=\"details\" type=\"text\" label=\"detail\"></v-text-field>\n              <v-text-field v-model=\"start\" type=\"date\" label=\"start (required)\"></v-text-field>\n              <v-text-field v-model=\"end\" type=\"date\" label=\"end (required)\"></v-text-field>\n              <v-text-field v-model=\"color\" type=\"color\" label=\"color (click to open color menu)\"></v-text-field>\n              <v-btn\n                type=\"submit\"\n                color=\"primary\"\n                class=\"mr-4\"\n                @click.stop=\"dialog=false\"\n              >Create Event</v-btn>\n            </v-form>\n          </v-container>\n        </v-card>\n      </v-dialog>\n\n      <v-sheet height=\"600\">\n        <v-calendar\n          ref=\"calendar\"\n          v-model=\"focus\"\n          color=\"primary\"\n          :events=\"events\"\n          :event-color=\"getEventColor\"\n          :event-margin-bottom=\"3\"\n          :now=\"today\"\n          :type=\"type\"\n          @click:event=\"showEvent\"\n          @click:more=\"viewDay\"\n          @click:date=\"viewDay\"\n          @change=\"updateRange\"\n        ></v-calendar>\n        <v-menu\n          v-model=\"selectedOpen\"\n          :close-on-content-click=\"false\"\n          :activator=\"selectedElement\"\n          offset-x\n        >\n          <v-card color=\"grey lighten-4\" min-width=\"350px\" flat>\n            <v-toolbar :color=\"selectedEvent.color\" dark>\n              <v-btn @click=\"deleteEvent(selectedEvent.id)\" icon>\n                <v-icon>mdi-delete</v-icon>\n              </v-btn>\n              <v-toolbar-title v-html=\"selectedEvent.name\"></v-toolbar-title>\n              <v-spacer></v-spacer>\n            </v-toolbar>\n            <v-card-text>\n              <form v-if=\"currentlyEditing !== selectedEvent.id\">{{selectedEvent.details}}</form>\n              <form v-else>\n                <textarea-autosize\n                  v-model=\"selectedEvent.details\"\n                  type=\"text\"\n                  style=\"width: 100% :min-height='100\"\n                  placeholder=\"add note\"\n                ></textarea-autosize>\n              </form>\n            </v-card-text>\n            <v-card-actions>\n              <v-btn text color=\"secondary\" @click=\"selectedOpen = false\">Close</v-btn>\n              <v-btn\n                text\n                v-if=\"currentlyEditing !== selectedEvent.id\"\n                @click.prevent=\"editEvent(selectedEvent)\"\n              >Edit</v-btn>\n              <v-btn text v-else @click.prevent=\"updateEvent(selectedEvent)\">Save</v-btn>\n            </v-card-actions>\n          </v-card>\n        </v-menu>\n      </v-sheet>\n    </v-col>\n  </v-row>\n</template>\n\n\n\n<script>\nimport { db } from \"@/main\";\n\nexport default {\n  data: () => ({\n    today: new Date().toISOString().substr(0, 10),\n    focus: new Date().toISOString().substr(0, 10),\n    type: \"month\",\n    typeToLabel: {\n      month: \"Month\",\n      week: \"Week\",\n      day: \"Day\",\n      \"4day\": \"4 days\"\n    },\n    name: null,\n    details: null,\n    start: null,\n    end: null,\n    color: \"#1976d2\",\n    currentlyEditing: null,\n    selectedEvent: {},\n    selectedElement: null,\n    selectedOpen: false,\n    events: [],\n    dialog: false\n  }),\n\n  computed: {\n    title() {\n      const { start, end } = this;\n      if (!start || !end) {\n        return \"\";\n      }\n\n      const startMonth = this.monthFormatter(start);\n      const endMonth = this.monthFormatter(end);\n      const suffixMonth = startMonth === endMonth ? \"\" : endMonth;\n\n      const startYear = start.year;\n      const endYear = end.year;\n      const suffixYear = startYear === endYear ? \"\" : endYear;\n\n      const startDay = start.day + this.nth(start.day);\n      const endDay = end.day + this.nth(end.day);\n\n      switch (this.type) {\n        case \"month\":\n          return `${startMonth} ${startYear}`;\n        case \"week\":\n        case \"4day\":\n          return `${startMonth} ${startDay} ${startYear} - ${suffixMonth} ${endDay} ${suffixYear}`;\n        case \"day\":\n          return `${startMonth} ${startDay} ${startYear}`;\n      }\n      return \"\";\n    },\n    monthFormatter() {\n      return this.$refs.calendar.getFormatter({\n        timeZone: \"UTC\",\n        month: \"long\"\n      });\n    }\n  },\n\n  mounted() {\n    this.getEvents();\n  },\n\n  methods: {\n    async getEvents() {\n      let snapshot = await db.collection(\"calEvent\").get();\n      let events = [];\n      snapshot.forEach(doc => {\n        let appData = doc.data();\n        appData.id = doc.id;\n        events.push(appData);\n      });\n      this.events = events;\n    },\n\n    async addEvent() {\n      if (this.name && this.start && this.end) {\n        await db.collection(\"calEvent\").add({\n          name: this.name,\n          details: this.details,\n          start: this.start,\n          end: this.end,\n          color: this.color\n        });\n\n        this.getEvents();\n        this.name = \"\";\n        this.details = \"\";\n        this.start = \"\";\n        this.end = \"\";\n        this.color = \"\";\n      } else {\n        alert(\"Name, start, and end are required.\");\n      }\n    },\n\n    async updateEvent(ev) {\n      await db\n        .collection(\"calEvent\")\n        .doc(this.currentlyEditing)\n        .update({ details: ev.details });\n\n      this.selectedOpen = false;\n      this.currentlyEditing = null;\n    },\n\n    async deleteEvent(ev) {\n      await db\n        .collection(\"calEvent\")\n        .doc(ev)\n        .delete();\n\n      this.selectedOpen = false;\n      this.getEvents();\n    },\n\n    viewDay({ date }) {\n      this.focus = date;\n      this.type = \"day\";\n    },\n\n    getEventColor(event) {\n      return event.color;\n    },\n\n    setToday() {\n      this.focus = this.today;\n    },\n\n    prev() {\n      this.$refs.calendar.prev();\n    },\n\n    next() {\n      this.$refs.calendar.next();\n    },\n\n    editEvent(ev) {\n      this.currentlyEditing = ev.id;\n    },\n\n    showEvent({ nativeEvent, event }) {\n      const open = () => {\n        this.selectedEvent = event;\n        this.selectedElement = nativeEvent.target;\n        setTimeout(() => (this.selectedOpen = true), 10);\n      };\n\n      if (this.selectedOpen) {\n        this.selectedOpen = false;\n        setTimeout(open, 10);\n      } else {\n        open();\n      }\n\n      nativeEvent.stopPropagation();\n    },\n\n    updateRange({ start, end }) {\n      // You could load events from an outside source (like database) now that we have the start and end dates on the calendar\n      this.start = start;\n      this.end = end;\n    },\n\n    nth(d) {\n      return d > 3 && d < 21\n        ? \"th\"\n        : [\"th\", \"st\", \"nd\", \"rd\", \"th\", \"th\", \"th\", \"th\", \"th\", \"th\"][d % 10];\n    }\n  }\n};\n</script>"]}]}